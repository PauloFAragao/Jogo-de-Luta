void Player::HorizontalMove()
{
	//desaceleração do player
	if( !button00 && speedX<0 && y >= CHAO )
	{
		if( action == 101 ) speedX += 1.2;
		else 				speedX += 1.8;

		if(speedX>0) speedX =0;
	} 
	if( !button02 && speedX>0 && y >= CHAO ) 
	{
		if( action == 101 ) speedX -= 1.2;
		else 				speedX -= 1.8;
		
		if(speedX<0) speedX =0;
	}

	
	//verifica para qual lado o personagem está virado
	if(toRight)//personagem virado para a direita
	{
		
		if(button00 && y >= CHAO)//com o personagem virado para a direita aqui ele se move para tras
		{
			//pulo para tras
			if( btTPress[0][8] - btTPress[0][7] < 150 && ValidateAction(110) && !antLoopJumpBack )
//btTPress[0][8] - btTPress[0][7] = se a difenreça de tempo entre o botão ter cido solto e pressionado é menor que 150 ms
			{
				speedX = -( RUNSPEED + 2 );
				speedY = -10;
				antLoopJumpBack = true;
				ChangeAction(110);
			}
			//andando para tras
			else if( ValidateAction(30) )
			{
				speedX = -WALKSPEED;
				ChangeAction(30);
			}
		}
		
		if(button02 && y >= CHAO)//com o personagem virado para a direita aqui ele se move para frente
		{
			//correndo para frente
			if( btTPress[2][8] - btTPress[2][7] < 150 && ValidateAction(100) )
//btTPress[2][8] - btTPress[2][7] = se a difenreça de tempo entre o botão ter cido solto e pressionado é menor que 150 ms
			{
				speedX = RUNSPEED;
				ChangeAction(100);
			}
			//andando para frente
			else if( ValidateAction(20) )
			{
				speedX = WALKSPEED;
				ChangeAction(20);
			}
		}
		
	}
	else//personagem virado para a esquerda
	{
		
	}
	
	
	//calcula se o peronagem está colidindo com o fim da cena e então movimenta o personagem
	if( x + speedX > MAXSCENARYWIDTH ) 	    
		x = MAXSCENARYWIDTH;
	
	else if( x + speedX < MINSCENARYWIDTH ) 
		x = MINSCENARYWIDTH;
	
	else 						           
		x += speedX;

	
}END_OF_FUNCTION(HorizontalMove)