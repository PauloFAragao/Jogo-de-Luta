void Player::HorizontalMove()
{

//Verificação dos imputs
	if( y >= CHAO )
	{
		if( button02 && antLoopBT2 )
		{
			antLoopBT2 = false;
			if( btTPress[2][8] - btTPress[2][7] < 100 )
			{
				
				//andando depois de correr
				if( ( action == 100 || action == 101 ) && toRight && ValidateAction(20) )
					ChangeAction(20);	
				
				//correndo
				else if( toRight && ValidateAction(100) ) 
					ChangeAction(100);
				
				//pulando para tras
				else if( !toRight && ValidateAction(110) )
				{
					speedX = RUNSPEED + 2 ;
					speedY = -10;
					ChangeAction(110);
				}
				
			}
			else if( toRight && ValidateAction(20) ) //andando
				ChangeAction(20);
				
			else if( !toRight && ValidateAction(30) ) //andando para tras
				ChangeAction(30);
			
			else antLoopBT2 = true;
		}
		
		// andar para tras - pular para tras
		if( button00 && antLoopBT0 )
		{
			antLoopBT0 = false;
			if( btTPress[0][8] - btTPress[0][7] < 150 )
			{
				
				//andando depois de correr
				if( ( action == 100 || action == 101 ) && !toRight && ValidateAction(20) )
					ChangeAction(20);
				
				//correndo
				else if( !toRight && ValidateAction(100) ) 
					ChangeAction(100);
				
				//pulando para tras
				else if( toRight && ValidateAction(110) )
				{
					speedX = -( RUNSPEED + 2 ) ;
					speedY = -10;
					ChangeAction(110);
				}
			}
			else if( !toRight && ValidateAction(20) ) //andando
				ChangeAction(20);
				
			else if( toRight && ValidateAction(30) ) //andando para tras
				ChangeAction(30);
			
			else antLoopBT0 = true;
		}
		
	}

//modificação da velocidade de acordo com a ação
	if( toRight )
	{
		//movimentar da esquerda para a direita
		if( button00 && action == 30) speedX = -WALKSPEED;
		
		//movimentar da direita para a esquerda
		if( button02 )
		{
			if( action == 100 ) speedX =  RUNSPEED;
			if( action == 20  ) speedX =  WALKSPEED;
		}
	}
	else
	{
		//movimentar da esquerda para a direita
		if( button00 )
		{
			if( action == 100 ) speedX = -RUNSPEED;
			if( action == 20  ) speedX = -WALKSPEED;
		}
	
		//movimentar da direita para a esquerda
		if( button02 && action == 30 )speedX =  WALKSPEED;
	}

	if( !button00 || !button02 )
	{
		if( y >= CHAO && speedX < 0 )
		{
			speedX += 0.8;
			if( speedX > 0 ) speedX =0;
		}
		if( y >= CHAO && speedX > 0 )
		{
			speedX -= 0.8;
			if( speedX < 0 ) speedX =0;
		}
	}
	
//alterando os valores das variaveis para evitar loop
	if( !antLoopBT0 && !button00 ) antLoopBT0 = true;

	if( !antLoopBT2 && !button02 ) antLoopBT2 = true;

//movimentação do personagem (verificando os limites do cenario)
	if( x + speedX > MAXSCENARYWIDTH ) 	    
		x = MAXSCENARYWIDTH;
	
	else if( x + speedX < MINSCENARYWIDTH ) 
		x = MINSCENARYWIDTH;
	
	else 						           
		x += speedX;
	
}END_OF_FUNCTION(HorizontalMove)

bool Player::ValidateAction(int value)
{
	
	switch(value)
	{	
		case -5://verifica se já está fazendo alguma dessas ações quando o personagem vai pular
			if( action != 80 || action != 60 || action != 40 )
				return true;
			else return false;
		break;
		
		case 10: //Crouched
		case 40: //Weak Jump
			if( action == 0 )
				return true;
			else return false;
		break;
	
		case 20: //Walk
			if( action == 0 || action == 30 || action == 100 || action == 101 )
				return true;
			else return false;
		break;
	
		case 30: //WalkBack
			if( action == 0 || action == 20 || action == 100 || action == 101 )
				return true;
			else return false;
		break;
	
		case 60://Weak Frontal Diagonal Jump
			if( action == 0 || action == 20 || action == 100 )
				return true;
			else return false;
		break;
	
		case 80://Weak Back Diagonal Jump
			if( action == 0 || action == 30 )
				return true;
			else return false;
		break;
	
		case 100: //Run
			if( action == 0 || action == 20 )
				return true;
			else return false;
		break;
	
		case 110: //Jump Back
			if( action == 0 || action == 30 )
				return true;
			else return false;
		break;
	
		default:
			return false;
		break;
	}
	
	return true;
}END_OF_FUNCTION(ValidateAction);